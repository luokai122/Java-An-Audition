##对比Vector、ArrayList、LinkedList的区别

三者都是实现集合框架中的List，也就是所谓的有序集合，因此功能也比较接近，但因为具体的设计区别，
在性能、行为、线程上等方面，在表现上又有很大的不同。

Vector是Java早期提供的线程安全的动态数组，如果不需要线程同步，不建议选择，毕竟同步是需要额外的开销的。
Vector是根据数组来保存数据的，可以根据数量自动增加容量，当数组已满时，会创建新的数组，然后拷贝原来的数组。

ArrayList是应用更为广泛的动态数组实现的，它本身不是线程安全的，所以从性能上来说要耗很多，在扩容方面，与Vector相似
都是自动增加容量，但是Vector是增加一倍，而ArrayList则是增加50%。

LinkedList则是Java提供的双向链表，所以他不需要进行扩容，它也不是线程安全的。

Vector和ArrayList作为动态数组，其内部元素以数组形式，所以非常适合随机访问，除了尾部插入和删除元素，其他的性能往往比较差，
比如在中间插入一个元素，需要移动后续所有元素。

而LinkedList进行节点插入、删除却要高效的多，但是随机访问的性能就会比较差。

所以在考虑实际应用中，需要考虑到这些因素，是更偏向于插入、删除、还是随机访问的更多，就可以针对性的进行选择。
