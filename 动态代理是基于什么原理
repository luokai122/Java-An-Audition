##编程语言通常有各种不同的分类角度，动态类型和静态类型就是其中一种分类角度，简单的区别就是
是在语言类型信息是在运行时检查，还是在编译期检查。

通常认为，Java是静态的强类型语言，因为提供了类型反射机制，也具备了部分类型动态语言的特性。

那么Java反射机制，动态代理是基于什么原理？

反射机制是Java语言提供的一种基础特性，程序在运行时赋予自省的功能。通过反射我们可以直接操作类或者对象，

动态代理则是一种方便运行时动态构建的代理、动态处理方法调用的机制，实现动态代理的方式有很多，比如JDK自身提供的动态代理
主要用到了上述的反射机制，比如还有利用更高性能的字节码操作机制，类似ASM

关于反射反射提供了AccessibleObject.setAccessible（boolean flag）,他的子类大多也重写了这个方法，这里的所谓accessible
可以理解成修饰成员的public、protected、private，这意味着我们可以在运行时修改成员变量的访问。

setAccessible的应用场景非常普遍，遍布我们的日常开发、测试、依赖注入等各种框架中。比如，O/R Mapping框架，我们创建一个Java对象
自动生成getter、setter等方法，框架通常可以用反射来做这个事情，而不需要开发者手写类型的重复代码。

另一个运用场景就是绕过API访问控制，我们日常开发中可能需要调用内部API，那么我们可以使用反射绕过限制
但是，在Java9以后，这个方法可能会存在一些争议，出于对封装的考虑，对反射访问做了限制，目前Java9仍然兼容
Java8的行为，但可能在不就的将来，只能设置过反射open的反射模块，才能调用setAccessible。

动态代理
首先它是一个代理机制，代理模式，代理可以看做对调用的目标的一个调用，这样我们对目标代码的调用不是直接发生的，而是通过代理发生。
代理的发展由静态到动态，动态的发展都源于静态代理引入了额外的工作。类似于早起RMI还需要生成静态stub等文件，增加了很多繁琐的准备工作，
利用动态代理的方式，可以在运行时就自动生成stub等，对应的调用也是动态完成。

JDK Proxy（手动实现代理模式）
最小化依赖关系，减少依赖意味着简化开发和维护
平滑进行JDK升级

