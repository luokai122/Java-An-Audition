##理解Java字符串，String、String Buffer、String Builder有什么区别

String是Java语言中非常重要的一个类，它提供了构造和管理字符串的各种基本逻辑。他是典型的
Immutable类，被申明成final class，所有属性也都是final的。也由于它的不可变性，类似拼接
、裁剪的操作都会产生新的对象，由于字符串操作的普遍性，往往会影响到应用的性能。

StringBuffer是为了解决上面提到的字符串的拼接和裁剪而产生的太多中间对象，我们可以用add或append
来增加字符串，StringBuffer需要注意的是它是线程安全的，这随之而来的还有额外的性能开销。所以除非有线程安全
的必要否则还是用StringBuilder。

StringBuilder是JDK1.5中新增的，在能力上和StringBuffer没有差别，但他去掉了线程安全的功能，有效
减少了开销，是绝大部分情况下字符串拼接的首选。

在几乎所有的应用开发中都离不开字符串，理解字符串的设计和其工具类的使用，对写出高质量的代码还是非常有帮助的
首选我们得明确一点String是Imutable类，字符串操作不当会产生大量临时字符串和线程安全上的问题。

字符串的设计和实现考量
String是Immutable类的典型实现，原生代码实现了线程安全，所以我们无法对他内部数据做任何的修改，由于不可变性，
Immutale对象在拷贝时不需要进行额外的复制数据。

我们再来看StringBuffer实现的细节，它的线程安全是通过把修改数据的方法加上synchronized关键字来实现的。

为了实现修改序列号的目的，StringBuffer和StringBuilder都是利用了可修改的数组，二者都继承于AbstractStringBuilder
二者的区别就是仅仅在于最终方法是否加了synchronized。

另外在这个内部的数组应该创建多大呢？如果太小，拼接的时候又需要创建足够大的数组，如果太大又会浪费空间。目前的实现是，构建
时初始字符串长度加16.

String strByBuilder = new StringBuilder().append("aa")
  .append("bb").append("cc").append("dd")

String str = "aa"+"bb"+"cc"+"dd"
其实在通常的情况下，没有必要担心，要相信Java还是很智能的，在进行反编译操作之后，我们发现字符串拼接自动被转为了StringBuilder
操作，所以在普通场景中，也足够优化了，可以酌情考虑。

字符串的缓存

在程序中，如果我们进行堆转储，然后分析对象组成，会发现平均25%的对象是字符串，那么我们如何进行字符串的缓存，避免创建重复的字符串呢？

String在Java6之后，提供了intern()的方法，目的是提示JVM把相应的字符串缓存起来，以备重复利用，在我们创建字符串的时候，
我们会调用intern()的方法，如果已有缓存，就会返回缓存里的实例，否则就将其缓存起来。
听着貌似不错，但是在实际操作的情况下，并不推荐使用intern？
因为被缓存的字符串存在于所谓的“PermGen”中，也就是“永久代”，这个空间有限，也不会被GC回收，如果使用不当就会造成宕机。
在后来的版本中，缓存被放到了堆中，这样就避免了永久被沾满的操作，而且缓存的大小也在不断地扩大中，

你也可以使用下面的JVM参数手动调节大小，但绝大数情况下都是不用调整的
-XX:StringTableSize=N

Intern是一种显式的排重机制，但他有副作用，因为需要开发者写代码的时候，明确调用，一不方便，二我们很难保证效率，应用开发的时候，
很难清除的预计自己重复的字符串。

在JDK8之后，推出了一个新特性，也就是G1 CG下的字符串排重，它是通过相同的数据指向同一份数据的来做到的，这是JVM底层的改变
并不需要Java类库做什么修改。

这个功能目前是默认关闭的，我们需要下面这个参数来改变他
-XX:+UseStringDeduplication

String自身的演化
在历史版本中，String使用char数组来储存数据，这样子非常的直接，但是Java中的char是由两个Byte组成的，在拉丁语系的字符，
根本不需要这么宽的char,所以在JDK9中，我们引入了Compact String的设计，将字符串由char改变为一个Btye再加上一个
编码标识coder,在理论上字符串的最大储存出现了退化，但我们更能看到其优势，即更小的内存占用、更快的操作速度。

String在转换成Byte时，getBytes需要指定编码方式，如果不指定则会看JVM参数中的file.ecoding参数，如果没有JVM则会看
系统环境中的编码方式，那编码方式就会不确定，极其容易乱码















