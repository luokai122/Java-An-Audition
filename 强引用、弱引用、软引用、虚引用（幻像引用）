##强引用、弱引用、软引用、虚引用（幻象引用）有什么区别？在具体什么场景中应用？

强引用：强引用是平常使用最多的应用，强引用在程序内存不足的时候，也不会被回收
String str = new String("str");

软引用：软引用是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾回收集，只有当JVM感觉
内存引用不足的时候，才会试图回收软引用指向的对象，软引用通常用来实现内存敏感的缓存，如果还有
内存空间，就可以暂时保留缓存，当内存不足的时候清理掉，这样就保证了使用缓存的同时，不会耗尽内存。
SoftReference<String> wft = new SoftReference<String>(new String("str"));

弱引用：弱引用并不能使对象豁免垃圾回收集，只要JVM垃圾回收器发现了它，就会将之回收。
WeakReference<String> wrs = new WeakReference<String>("str");

虚引用（幻象引用）：虚引用的回收机制和弱引用的差不多，但它被回收之前，会被放入ReferenceQueue中，
其他都是JVM回收之后才被传入ReferenceQueue，所以虚引用大多被用于引用被销毁前的处理工作。

所有的引用类型，都是抽象类 java.lang.ref.Reference的子类，它提供了get()方法，这说明了只要对象还未被销毁，
都可以通过get方法获取原对象，也就是说明了只要对象未被销毁都可以转换成强引用对象，当然这除了虚引用，虚引用的
get方法返回都是null。
但是如果我们错误地将强引用赋值了static，那么对象可能没有机会变成弱引用对象，那么很容易发生内存溢出

引用队列：我们在创建各种引用并关联到响应对象的时候，可以选择是否关联引用队列，我们可以从队列中获取引用，
进行相关的后续逻辑，尤其是虚引用，get的返回值是null如果再不指定引用队列，那就没意义了

