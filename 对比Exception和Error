对比Exception和Error的区别，另外，运行时异常和一般异常有什么区别

Exception和Error都继承于Throwable类，只有Throwable类才可以再程序运行时抛出或被捕获，这是异常的基本组成部分

Exception和Error都体现了Java设计者的对不同异常情况的分类，
Exception是程序正常运行中可以预料的问题，可以也应该被捕获，进行相应的处理。
Error则是指正常情况下，不大可能出现的问题，绝大部分Error都使程序本身处于非正常的状态下。既然是非正常的状态则也不需要捕获

Exception还可以分为可检查型的和非可检查型的，即在编译时，这个Exception需要被进行异常处理，
比如IOException，如果不对异常进行捕获则不能通过编译，不检查的异常就是所谓的运行时异常，比如NullException
通常是可以通过逻辑判断来避免，所以不会强制要求进行异常捕获，可以通过编译。

在捕获异常中，容易犯的错误
try{
  //业务代码
  //...
  Thread.sleep(2000);
}catch(Exception e){
  e.printStackTrace()
}
第一:在异常捕获中，要尽量避免捕获Exception这样的异常，在这里Thread.sleep()抛出的应该是InterruptedException,
应该是捕获特定异常。
因为在日常的编码中，我们通常需要让自己的代码提现出更多的问题，而直接捕获Exception则会让真正的Exception被隐藏。
第二：要避免生吞异常，则也没有进行日志处理，也没有进行任何逻辑处理，那么在日常编程中，则会导致无法定位真正的报错原因
在日志处理的过程中，绝对不能e.printStackTrace，在稍微复杂一点的系统中，根本找不到。在分布式的框架里，如果发生异常，无法
找到stacktrace

在异常处理的过程中，如果能用逻辑进行判断，那就要避免try catch，在try catch中也或产生额外的性能开销，所以它也会对JVM产生性能上的
影响，Java实例化Exception,都会对堆栈进行快照，这是个相对比较重的开销，如果发生的频繁，那这个开销就不能避免了

这么说来，当我们的JVM发生吞吐下降，反应变慢的情况下，我们可以来检查是否Exception的检查太过于频繁了

那么如何处理异步操作中的Exception呢？
首先要完善任务重试机制，在执行异常的时候，保存当前任务信息，加入重试队列
promise处理机制

在异步操作中，日志不再是垂直结构，那么如何处理异步日志呢？
在异步操作中，日志会用traceId/requiredId进行串联，有些日志本身就支持MDC/NDC



